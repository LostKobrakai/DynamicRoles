<?php

/**
 * Dynamic Role Support
 *
 * By Avoine and ProcessWire
 * Concept: Antti Peisa
 * Code: Ryan Cramer
 *
 */

class ProcessDynamicRole extends ProcessPageType {

	static public function getModuleInfo() {
		return array(
			'title' => __('Dynamic Roles', __FILE__), // getModuleInfo title
			'version' => 1, 
			'summary' => __('Dynamic roles manager.', __FILE__), // getModuleInfo summary 
			'permission' => 'droles-admin', // add this permission if you want this Process available for roles other than Superuser
			'permissions' => array(
				'droles-admin' => 'Manage dynamic roles (recommended for superuser only)'
				),
			'icon' => 'bullhorn',
			'installs' => 'DynamicRoleSupport',
			'requires' => 'ProcessWire>=2.4.5', 
			'group' => 'DynamicRoles', 
			); 
	}

	public function __construct() {
		parent::__construct();
		$this->set('showFields', array('name', 'permissions')); 
	}

	public function init() {
		set_time_limit(3600); 
		parent::init();
		$this->addLabel = $this->_('Add Dynamic Role'); 
		$this->addHookBefore('InputfieldMultiplier::render', $this, 'hookInputfieldMultiplierRender'); 
		$this->addHookBefore('InputfieldForm::render', $this, 'hookInputfieldFormRender'); 
		$this->addHookAfter('ProcessPageEdit::execute', $this, 'hookProcessPageEditExecute'); 
	}
	
	public function hookInputfieldMultiplierRender($event) {
		$f = $event->object;
		$f->wrapClass = 'InputfieldItemList';
		$f->addLabel = $this->_('Add Section');
	}
	
	public function hookInputfieldFormRender($event) {
		$form = $event->object;
		$f = $form->getChildByName('permissions');
		if(!$f) return;
		$f->description = $this->_('Check each permission you would like to assign to users matching your selector above.');
		$f->notes = $this->_('*Checking page-edit permission will reveal an additional field below where you can define specifically what they can edit. Note that page-edit permission is a prerequisite to using the admin, and thus a prerequisite to many of the permissions here being applicable. As a result, it is recommended that you check page-edit permission if you intend for this dynamic role to have any kind of admin access, even if you do not define anything for them to edit.');
		$f = $f->getInputfield();
		$f->table = true;
		$f->thead = 'name|title';
		$options = $f->getOptions();
		foreach($options as $name => $label) $f->removeOption($name);
		foreach($this->wire('permissions') as $permission) {
			$name = $permission->name;
			if($name == 'page-edit') $name .= " *";
			if($name == 'page-view') $name .= " " . $this->_('(required)');
			$f->addOption($permission->id, "$name|$permission->title");
		}
		$value = $f->attr('value');
		if(!in_array(DynamicRoleSupport::viewPermissionID, $value)) {
			$value[] = DynamicRoleSupport::viewPermissionID;
			$f->attr('value', $value);
		}
	}
	
	public function hookProcessPageEditExecute($event) {
		$event->return .= "<p class='notes'>" . $this->_('Note: if you make changes to the view or edit selectors above, an index will be re-built upon save. Depending on how many pages are involved, it may take significantly longer than a normal page save.') . "</p>";
	}

	public function ___install() {
		if(version_compare(wire('config')->version, '2.4.5', '<')) {
			throw new WireException('Dynamic Roles requires ProcessWire 2.4.5 (dev branch) or newer.'); 
		}
	}

	
}

